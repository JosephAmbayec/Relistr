name: Chrome Web Store Deploy

on:
  repository_dispatch:
    types: [chrome-web-store-deploy]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: v${{ github.event.client_payload.version || inputs.version }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: npm run build
      
    - name: Create deployment package
      run: |
        mkdir -p chrome-deploy
        zip -r chrome-deploy/extension.zip \
          manifest.json \
          popup.html \
          options.html \
          config.json \
          dist/ \
          icons/
          
    - name: Validate package
      run: |
        echo "Package size: $(du -h chrome-deploy/extension.zip | cut -f1)"
        unzip -l chrome-deploy/extension.zip
        
    - name: Deploy to Chrome Web Store
      if: ${{ secrets.CHROME_EXTENSION_ID != '' }}
      env:
        EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
        CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
        REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
      run: |
        # Get access token using refresh token
        echo "Getting access token..."
        ACCESS_TOKEN_RESPONSE=$(curl -s -X POST \
          -d "client_id=${CLIENT_ID}" \
          -d "client_secret=${CLIENT_SECRET}" \
          -d "refresh_token=${REFRESH_TOKEN}" \
          -d "grant_type=refresh_token" \
          https://oauth2.googleapis.com/token)
        
        ACCESS_TOKEN=$(echo $ACCESS_TOKEN_RESPONSE | jq -r '.access_token')
        
        if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
          echo "Failed to get access token:"
          echo $ACCESS_TOKEN_RESPONSE
          exit 1
        fi
        
        # Upload extension to Chrome Web Store
        echo "Uploading extension..."
        UPLOAD_RESPONSE=$(curl -s -X PUT \
          -H "Authorization: Bearer ${ACCESS_TOKEN}" \
          -H "x-goog-api-version: 2" \
          -T chrome-deploy/extension.zip \
          "https://www.googleapis.com/chromewebstore/v1.1/items/${EXTENSION_ID}")
        
        echo "Upload response:"
        echo $UPLOAD_RESPONSE | jq '.'
        
        # Check if upload was successful
        UPLOAD_STATE=$(echo $UPLOAD_RESPONSE | jq -r '.uploadState // empty')
        if [ "$UPLOAD_STATE" != "SUCCESS" ]; then
          echo "Upload failed!"
          exit 1
        fi
        
        # Publish the extension
        echo "Publishing extension..."
        PUBLISH_RESPONSE=$(curl -s -X POST \
          -H "Authorization: Bearer ${ACCESS_TOKEN}" \
          -H "x-goog-api-version: 2" \
          -H "Content-Length: 0" \
          "https://www.googleapis.com/chromewebstore/v1.1/items/${EXTENSION_ID}/publish")
        
        echo "Publish response:"
        echo $PUBLISH_RESPONSE | jq '.'
        
        # Check publish status
        PUBLISH_STATUS=$(echo $PUBLISH_RESPONSE | jq -r '.status[0] // empty')
        if [ -n "$PUBLISH_STATUS" ] && [ "$PUBLISH_STATUS" != "OK" ]; then
          echo "Publish failed with status: $PUBLISH_STATUS"
          exit 1
        fi
        
        echo "‚úÖ Extension deployed successfully!"
        
    - name: Create deployment summary
      run: |
        cat << EOF >> $GITHUB_STEP_SUMMARY
        ## üöÄ Chrome Web Store Deployment
        
        **Version:** ${{ github.event.client_payload.version || inputs.version }}
        **Status:** ‚úÖ Deployed Successfully
        **Extension ID:** \`${{ secrets.CHROME_EXTENSION_ID }}\`
        **Store URL:** https://chrome.google.com/webstore/detail/${{ secrets.CHROME_EXTENSION_ID }}
        
        ### Package Details
        - **Size:** $(du -h chrome-deploy/extension.zip | cut -f1)
        - **Files:** $(unzip -l chrome-deploy/extension.zip | wc -l) files
        - **Build Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ### Next Steps
        - The extension is now live on the Chrome Web Store
        - It may take a few hours to appear for all users
        - Monitor the [Chrome Web Store Developer Dashboard](https://chrome.google.com/webstore/devconsole) for review status
        EOF
        
    - name: Notify on failure
      if: failure()
      run: |
        cat << EOF >> $GITHUB_STEP_SUMMARY
        ## ‚ùå Chrome Web Store Deployment Failed
        
        **Version:** ${{ github.event.client_payload.version || inputs.version }}
        **Status:** Failed
        
        ### Possible Issues
        - Check Chrome Web Store API credentials in repository secrets
        - Verify extension package meets Web Store requirements
        - Review manifest.json for policy violations
        - Check deployment logs above for specific errors
        
        ### Required Secrets
        - \`CHROME_EXTENSION_ID\`: Your extension's ID from Chrome Web Store
        - \`CHROME_CLIENT_ID\`: OAuth client ID from Google Cloud Console
        - \`CHROME_CLIENT_SECRET\`: OAuth client secret from Google Cloud Console
        - \`CHROME_REFRESH_TOKEN\`: OAuth refresh token for authentication
        
        ### Setup Instructions
        1. Create a Google Cloud project and enable Chrome Web Store API
        2. Create OAuth client ID for web application
        3. Add https://developers.google.com/oauthplayground as authorized redirect URI
        4. Use OAuth Playground with scope: https://www.googleapis.com/auth/chromewebstore
        5. Generate refresh token and add all credentials as repository secrets
        EOFname: Chrome Web Store Deploy

on:
  repository_dispatch:
    types: [chrome-web-store-deploy]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: v${{ github.event.client_payload.version || inputs.version }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build extension
      run: npm run build
      
    - name: Create deployment package
      run: |
        mkdir -p chrome-deploy
        zip -r chrome-deploy/extension.zip \
          manifest.json \
          popup.html \
          options.html \
          config.json \
          dist/ \
          icons/
          
    - name: Validate package
      run: |
        echo "Package size: $(du -h chrome-deploy/extension.zip | cut -f1)"
        unzip -l chrome-deploy/extension.zip
        
    - name: Deploy to Chrome Web Store
      if: ${{ secrets.CHROME_EXTENSION_ID != '' }}
      env:
        EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
        CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
        REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
      run: |
        # Get access token using refresh token
        echo "Getting access token..."
        ACCESS_TOKEN_RESPONSE=$(curl -s -X POST \
          -d "client_id=${CLIENT_ID}" \
          -d "client_secret=${CLIENT_SECRET}" \
          -d "refresh_token=${REFRESH_TOKEN}" \
          -d "grant_type=refresh_token" \
          https://oauth2.googleapis.com/token)
        
        ACCESS_TOKEN=$(echo $ACCESS_TOKEN_RESPONSE | jq -r '.access_token')
        
        if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
          echo "Failed to get access token:"
          echo $ACCESS_TOKEN_RESPONSE
          exit 1
        fi
        
        # Upload extension to Chrome Web Store
        echo "Uploading extension..."
        UPLOAD_RESPONSE=$(curl -s -X PUT \
          -H "Authorization: Bearer ${ACCESS_TOKEN}" \
          -H "x-goog-api-version: 2" \
          -T chrome-deploy/extension.zip \
          "https://www.googleapis.com/chromewebstore/v1.1/items/${EXTENSION_ID}")
        
        echo "Upload response:"
        echo $UPLOAD_RESPONSE | jq '.'
        
        # Check if upload was successful
        UPLOAD_STATE=$(echo $UPLOAD_RESPONSE | jq -r '.uploadState // empty')
        if [ "$UPLOAD_STATE" != "SUCCESS" ]; then
          echo "Upload failed!"
          exit 1
        fi
        
        # Publish the extension
        echo "Publishing extension..."
        PUBLISH_RESPONSE=$(curl -s -X POST \
          -H "Authorization: Bearer ${ACCESS_TOKEN}" \
          -H "x-goog-api-version: 2" \
          -H "Content-Length: 0" \
          "https://www.googleapis.com/chromewebstore/v1.1/items/${EXTENSION_ID}/publish")
        
        echo "Publish response:"
        echo $PUBLISH_RESPONSE | jq '.'
        
        # Check publish status
        PUBLISH_STATUS=$(echo $PUBLISH_RESPONSE | jq -r '.status[0] // empty')
        if [ -n "$PUBLISH_STATUS" ] && [ "$PUBLISH_STATUS" != "OK" ]; then
          echo "Publish failed with status: $PUBLISH_STATUS"
          exit 1
        fi
        
        echo "‚úÖ Extension deployed successfully!"
        
    - name: Create deployment summary
      run: |
        cat << EOF >> $GITHUB_STEP_SUMMARY
        ## üöÄ Chrome Web Store Deployment
        
        **Version:** ${{ github.event.client_payload.version || inputs.version }}
        **Status:** ‚úÖ Deployed Successfully
        **Extension ID:** \`${{ secrets.CHROME_EXTENSION_ID }}\`
        **Store URL:** https://chrome.google.com/webstore/detail/${{ secrets.CHROME_EXTENSION_ID }}
        
        ### Package Details
        - **Size:** $(du -h chrome-deploy/extension.zip | cut -f1)
        - **Files:** $(unzip -l chrome-deploy/extension.zip | wc -l) files
        - **Build Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ### Next Steps
        - The extension is now live on the Chrome Web Store
        - It may take a few hours to appear for all users
        - Monitor the [Chrome Web Store Developer Dashboard](https://chrome.google.com/webstore/devconsole) for review status
        EOF
        
    - name: Notify on failure
      if: failure()
      run: |
        cat << EOF >> $GITHUB_STEP_SUMMARY
        ## ‚ùå Chrome Web Store Deployment Failed
        
        **Version:** ${{ github.event.client_payload.version || inputs.version }}
        **Status:** Failed
        
        ### Possible Issues
        - Check Chrome Web Store API credentials in repository secrets
        - Verify extension package meets Web Store requirements
        - Review manifest.json for policy violations
        - Check deployment logs above for specific errors
        
        ### Required Secrets
        - \`CHROME_EXTENSION_ID\`: Your extension's ID from Chrome Web Store
        - \`CHROME_CLIENT_ID\`: OAuth client ID from Google Cloud Console
        - \`CHROME_CLIENT_SECRET\`: OAuth client secret from Google Cloud Console
        - \`CHROME_REFRESH_TOKEN\`: OAuth refresh token for authentication
        
        ### Setup Instructions
        1. Create a Google Cloud project and enable Chrome Web Store API
        2. Create OAuth client ID for web application
        3. Add https://developers.google.com/oauthplayground as authorized redirect URI
        4. Use OAuth Playground with scope: https://www.googleapis.com/auth/chromewebstore
        5. Generate refresh token and add all credentials as repository secrets
        EOF